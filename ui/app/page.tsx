// Filename: app/page.tsx
// This single file creates a complete Next.js page to visualize your AI workflow.
// "use client" is required for App Router components that use React hooks.
"use client";

import { useState, useEffect, useRef } from "react";
import type { NextPage } from "next";
// To render Markdown, you'll need to install react-markdown and its GFM plugin.
// Run: npm install react-markdown remark-gfm
import ReactMarkdown from "react-markdown";
import remarkGfm from "remark-gfm";

// --- Helper Components ---

// A simple loading spinner component
const Spinner = () => (
  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-gray-900"></div>
);

// Component to render a single step in the response evolution
const ChatStep = ({
  step,
  index,
  totalSteps,
}: {
  step: any;
  index: number;
  totalSteps: number;
}) => {
  const isLastStep = index === totalSteps - 1;
  const stepColor = isLastStep
    ? "border-blue-500 bg-blue-50"
    : "border-gray-200 bg-white";
  const textColor = isLastStep ? "text-blue-700" : "text-gray-500";

  // Determine if the llmResult is JSON and should be formatted as a code block
  let llmResultContent = step.llmResult || "*Processing...*";
  const isJson =
    llmResultContent.trim().startsWith("[") &&
    llmResultContent.trim().endsWith("]");

  if (isJson) {
    llmResultContent = "```json\n" + llmResultContent + "\n```";
  }

  return (
    <div
      className={`p-4 border-l-4 ${stepColor} rounded-r-lg mb-4 transition-all duration-500`}
    >
      <div className="mb-2">
        {/* Display the assistant's name, role, and phase name */}
        <div className="font-semibold text-gray-900">
          {step.assistant?.name || `Assistant ${index + 1}`}
        </div>
        <div className={`text-xs ${textColor}`}>
          {step.assistant?.role} ({step.assistant?.phaseName})
        </div>
      </div>
      {/* This div uses Tailwind's arbitrary variants (`[&_selector]:utility`) to apply specific styles 
        to the HTML elements generated by ReactMarkdown, ensuring consistent and robust formatting.
      */}
      <div
        className="text-gray-800
                   [&_h1]:text-xl [&_h1]:font-bold [&_h1]:my-4
                   [&_h2]:text-lg [&_h2]:font-semibold [&_h2]:my-3
                   [&_h3]:text-base [&_h3]:font-semibold [&_h3]:my-2
                   [&_p]:my-2
                   [&_ul]:my-3 [&_ol]:my-3
                   [&_pre]:bg-slate-900 [&_pre]:text-slate-200 [&_pre]:p-4 [&_pre]:rounded-lg [&_pre]:text-xs [&_pre]:whitespace-pre-wrap [&_pre]:break-all [&_pre]:border [&_pre]:border-slate-700
                   [&_code]:text-xs [&_code]:font-mono"
      >
        <ReactMarkdown remarkPlugins={[remarkGfm]}>
          {llmResultContent}
        </ReactMarkdown>
      </div>
    </div>
  );
};

// --- Main Page Component ---

const WorkflowVisualizerPage: NextPage = () => {
  const [question, setQuestion] = useState<string>("");
  const [workflowId, setWorkflowId] = useState<string | null>(null);
  const [steps, setSteps] = useState<any[]>([]);
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [isPolling, setIsPolling] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);

  const pollingIntervalRef = useRef<NodeJS.Timeout | null>(null);

  // This effect handles the API polling
  useEffect(() => {
    if (isPolling && workflowId) {
      pollingIntervalRef.current = setInterval(async () => {
        try {
          const apiBaseUrl =
            process.env.NEXT_PUBLIC_WORKFLOW_SERVICE_API_BASE_URL;
          if (!apiBaseUrl) {
            throw new Error(
              "NEXT_PUBLIC_WORKFLOW_SERVICE_API_BASE_URL is not defined in your .env.local file."
            );
          }

          // Updated to use a POST request to the getLatestWorkflow endpoint
          const response = await fetch(
            `${apiBaseUrl}/api/v1/workflow-service/getLatestWorkflow`,
            {
              method: "POST",
              mode: "cors", // Explicitly set CORS mode
              headers: { "Content-Type": "application/json" },
              body: JSON.stringify({ workflowId: workflowId }),
            }
          );

          if (!response.ok) {
            throw new Error(`API Error: ${response.statusText}`);
          }

          const data = await response.json();

          const workflowSteps = data.steps || [];
          setSteps(workflowSteps);

          // --- FIX ---
          // Check for workflow completion by inspecting the status of the last step in the array.
          if (workflowSteps.length > 0) {
            const lastStep = workflowSteps[workflowSteps.length - 1];
            if (
              lastStep &&
              (lastStep.stepStatus === "completed" ||
                lastStep.stepStatus === "failed")
            ) {
              setIsPolling(false);
              setIsLoading(false);
              if (lastStep.stepStatus === "failed") {
                setError("The workflow failed to complete.");
              }
            }
          }
        } catch (err) {
          console.error(err);
          setError(
            err instanceof Error
              ? err.message
              : "An unknown error occurred during polling."
          );
          setIsPolling(false);
          setIsLoading(false);
        }
      }, 10000); // Poll every 10 seconds
    }

    // Cleanup function to clear the interval when the component unmounts or polling stops
    return () => {
      if (pollingIntervalRef.current) {
        clearInterval(pollingIntervalRef.current);
      }
    };
  }, [isPolling, workflowId]);

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (!question.trim()) return;

    // Reset state for a new submission
    setSteps([]);
    setError(null);
    setIsLoading(true);
    setWorkflowId(null);
    if (pollingIntervalRef.current) {
      clearInterval(pollingIntervalRef.current);
    }

    try {
      const apiBaseUrl = process.env.NEXT_PUBLIC_WORKFLOW_SERVICE_API_BASE_URL;
      if (!apiBaseUrl) {
        throw new Error(
          "NEXT_PUBLIC_WORKFLOW_SERVICE_API_BASE_URL is not defined in your .env.local file."
        );
      }

      // Initial request to start the workflow at the specified endpoint
      const response = await fetch(
        `${apiBaseUrl}/api/v1/workflow-service/sendQuery`,
        {
          method: "POST",
          mode: "cors", // Explicitly set CORS mode for the initial request
          headers: { "Content-Type": "application/json" },
          // Use 'query' as the field name in the request body
          body: JSON.stringify({ query: question }),
        }
      );

      if (!response.ok) {
        throw new Error(`API Error: ${response.statusText}`);
      }

      const data = await response.json();
      setWorkflowId(data.workflowId);
      setIsPolling(true); // Start polling
    } catch (err) {
      console.error(err);
      setError(
        err instanceof Error ? err.message : "An unknown error occurred."
      );
      setIsLoading(false);
    }
  };

  return (
    <div className="bg-gray-100 min-h-screen font-sans flex items-center justify-center p-4">
      <div className="w-full max-w-3xl bg-white rounded-xl shadow-lg p-8">
        <h1 className="text-3xl font-bold text-center text-gray-800 mb-2">
          AI Workflow Visualizer
        </h1>
        <p className="text-center text-gray-500 mb-8">
          Ask a question to see the step-by-step evolution of the AI's response.
        </p>

        {/* Input Form */}
        <form onSubmit={handleSubmit} className="flex items-center gap-4 mb-8">
          <input
            type="text"
            value={question}
            onChange={(e) => setQuestion(e.target.value)}
            placeholder="Ask your question here..."
            className="flex-grow p-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:outline-none transition"
            disabled={isLoading}
          />
          <button
            type="submit"
            className="bg-blue-600 text-white font-semibold px-6 py-3 rounded-lg hover:bg-blue-700 disabled:bg-gray-400 disabled:cursor-not-allowed transition flex items-center gap-2"
            disabled={isLoading}
          >
            {isLoading ? (
              <>
                <Spinner /> Working...
              </>
            ) : (
              "Ask"
            )}
          </button>
        </form>

        {/* Results Area */}
        <div className="space-y-4">
          {error && (
            <div
              className="bg-red-100 border-l-4 border-red-500 text-red-700 p-4 rounded-r-lg"
              role="alert"
            >
              <p className="font-bold">Error</p>
              <p>{error}</p>
            </div>
          )}

          {steps.length > 0 && (
            <div className="bg-gray-50 p-4 rounded-lg">
              <h2 className="text-xl font-semibold mb-4 text-gray-700">
                Response Evolution
              </h2>
              {steps.map((step, index) => (
                <ChatStep
                  key={step.stepId || index}
                  step={step}
                  index={index}
                  totalSteps={steps.length}
                />
              ))}
            </div>
          )}

          {isLoading && steps.length === 0 && (
            <div className="text-center text-gray-500 p-8">
              <p>Starting the workflow...</p>
            </div>
          )}
        </div>
      </div>
    </div>
  );
};

export default WorkflowVisualizerPage;
